# PP-Yolo-E Detection training on CoCo2017 Dataset:
# PP-Yolo-E trained in 640x640
# Checkpoints + tensorboards: https://deci-pretrained-models.s3.amazonaws.com/ppyoloe_coco/
# Recipe runs with batch size = 16 X 8 gpus = 128.


# Instructions:
#   0. Make sure that the data is stored in dataset_params.dataset_dir or add "dataset_params.data_dir=<PATH-TO-DATASET>" at the end of the command below (feel free to check ReadMe)
#   1. Move to the project root (where you will find the ReadMe and src folder)
#   2. Run the command you want:
#         ppyoloe_s: python src/super_gradients/examples/train_from_recipe_example/train_from_recipe.py --config-name=coco2017_ppyoloe arch_params=ppyoloe_s_arch_params dataset_params.train_dataloader_params.batch_size=48
#         ppyoloe_m: python src/super_gradients/examples/train_from_recipe_example/train_from_recipe.py --config-name=coco2017_ppyoloe arch_params=ppyoloe_m_arch_params
#         ppyoloe_l: python src/super_gradients/examples/train_from_recipe_example/train_from_recipe.py --config-name=coco2017_ppyoloe arch_params=ppyoloe_l_arch_params
#         ppyoloe_x: python src/super_gradients/examples/train_from_recipe_example/train_from_recipe.py --config-name=coco2017_ppyoloe arch_params=ppyoloe_x_arch_params
#
# Training times and accuracies (mAP@0.5-0.95 (COCO API, confidence 0.001, IoU threshold 0.6, test on 640x640 images):
#         yolox_n: 1d 16h 33m 9s  on 8 NVIDIA GeForce RTX 3090, mAP: 26.77
#         yolox_t: 20h 43m 37s    on 8 NVIDIA RTX A5000, mAP: 37.18
#         yolox_s: 1d 17h 40m 30s on 8 NVIDIA RTX A5000, mAP: 40.47
#         yolox_m: 1d 22h 23m 43s on 8 NVIDIA GeForce RTX 3090, mAP: 46.40
#         yolox_l: 2d 14h 11m 41s on 8 NVIDIA GeForce RTX 3090, mAP: 49.25
#



defaults:
  - training_hyperparams: coco2017_ppyoloe_paper_version
  - dataset_params: coco_detection_ppyoloe_dataset_params
  - arch_params: ppyoloe_s_arch_params
  - checkpoint_params: default_checkpoint_params
  - _self_

train_dataloader: new_coco2017_train
val_dataloader: new_coco2017_val

#  backbone:
#    pretrained_weights: CSPResNetb_s_pretrained.pth

load_checkpoint: False
resume: False

dataset_params:
  train_dataloader_params:
    batch_size: 8

    # Disable pin_memory due to presence of DetectionRandomResizePrePredictionCallback
    # which makes pinned memory useless as input tensors a new size for each new batch
    pin_memory: False

  val_dataloader_params:
    pin_memory: False

training_hyperparams:
  resume: ${resume}

  initial_lr: 0.01
  mixed_precision: False

  sg_logger: "wandb_sg_logger"
  sg_logger_params:
    project_name: coco2017_ppyoloe_s
    entity: super-gradients
    api_server: "https://wandb.research.deci.ai"
    save_checkpoints_remote: True
    save_tensorboard_remote: True
    save_logs_remote: True

  ema: True
  ema_params:
    decay: 0.9998
    decay_function:
      constant: null

architecture: ppyoloe

multi_gpu: DDP
num_gpus: 8

experiment_suffix: 640
experiment_name: coco2017_ppyoloe_s_${experiment_suffix}

ckpt_root_dir:


# THE FOLLOWING PARAMS ARE DIRECTLY USED BY HYDRA
hydra:
  run:
    # Set the output directory (i.e. where .hydra folder that logs all the input params will be generated)
    dir: ${hydra_output_dir:${ckpt_root_dir}, ${experiment_name}}
