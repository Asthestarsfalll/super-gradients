import collections
import os.path
import random
import tempfile
import unittest
from pprint import pprint
from typing import List, Tuple

import json_tricks as json
import numpy as np
import torch.cuda
from pycocotools.coco import COCO
from pycocotools.cocoeval import COCOeval

from super_gradients.common.object_names import Models
from super_gradients.training import models
from super_gradients.training.datasets.pose_estimation_datasets.coco_utils import (
    remove_duplicate_annotations,
    make_keypoints_outside_image_invisible,
    remove_crowd_annotations,
    remove_empty_samples,
)
from super_gradients.training.metrics.pose_estimation_metrics import PoseEstimationMetrics
from super_gradients.training.models.pose_estimation_models import YoloNASPose


class TestPoseEstimationMetrics(unittest.TestCase):
    def test_yolo_nas_pose_s(self):
        # model: YoloNASPose = (
        #     models.get(
        #         Models.YOLO_NAS_POSE_NEW_HEAD_S,
        #         num_classes=17,
        #         strict_load=StrictLoad.KEY_MATCHING,
        #         #  574
        #         checkpoint_path="G:/super-gradients/checkpoints/coco2017_yolo_nas_pose_new_head_s_mosaic_1.0_12.0_dfl_0.01_2.5_1.0_focal/RUN_20230902_153215_812529/average_model.pth",  # noqa
        #     )
        #     .eval()
        #     .cuda()
        # )

        # model: YoloNASPose = (
        #     models.get(
        #         Models.YOLO_NAS_POSE_S,
        #         num_classes=17,
        #         checkpoint_path="G:/super-gradients/checkpoints/coco2017_yolo_nas_pose_s_mosaic_v2_average_model.pth",  # 585
        #         # checkpoint_path="G:/super-gradients/checkpoints/coco2017_yolo_nas_pose_s_mosaic_v2_ckpt_best.pth",  # 584
        #         # arch_params=dict(heads=dict(YoloNASPoseNDFLHeads=dict(compensate_grid_cell_offset=False, pose_offset_multiplier=3))),
        #     )
        #     .eval()
        #     .cuda()
        # )

        # model: YoloNASPose = (
        #     models.get(
        #         Models.YOLO_NAS_POSE_S,
        #         num_classes=17,
        #         # 0.580
        #         checkpoint_path="G:/super-gradients/checkpoints/coco2017_yolo_nas_pose_s_box_focal_1_ciou_2_5_dfl_001_pose_focal_1_reg_17_head_comp_off_scale_1_default.pth",
        #     )
        #     .eval()
        #     .cuda()
        # )

        # model: YoloNASPose = (
        #     models.get(
        #         Models.YOLO_NAS_POSE_S,
        #         num_classes=17,
        #         # 575
        #         checkpoint_path="G:/super-gradients/checkpoints/coco2017_yolo_nas_pose_s_box_focal_1_0_ciou_2_5_dfl_001_pose_focal_1.0_reg_17_head_comp_off_scale_1_rescale.pth",
        #     )
        #     .eval()
        #     .cuda()
        # )

        #  Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets= 20 ] = 0.600
        #  Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets= 20 ] = 0.844
        #  Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets= 20 ] = 0.665
        #  Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets= 20 ] = 0.557
        #  Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets= 20 ] = 0.671
        #  Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 20 ] = 0.670
        #  Average Recall     (AR) @[ IoU=0.50      | area=   all | maxDets= 20 ] = 0.890
        #  Average Recall     (AR) @[ IoU=0.75      | area=   all | maxDets= 20 ] = 0.731
        #  Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets= 20 ] = 0.623
        #  Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets= 20 ] = 0.735
        model: YoloNASPose = (
            models.get(
                Models.YOLO_NAS_POSE_SHARED_S,
                num_classes=17,
                checkpoint_path="G:/super-gradients/checkpoints/2023_09-12_yolo_nas_pose_shared_s_ckpt_best.pth",
            )
            .eval()
            .cuda()
        )

        images_path = "g:/coco2017/images/val2017"
        image_files = [os.path.join(images_path, x) for x in os.listdir(images_path)]
        # image_files = image_files[:20]
        images_with_samples = self._load_coco_groundtruth(with_crowd=True, with_duplicates=True, with_invisible_keypoitns=True, with_empty_samples=False)
        non_empty_image_ids = [image_sample["id"] for image_sample in images_with_samples.dataset["images"]]

        # ultralitys
        non_empty_image_ids = [
            139,
            785,
            872,
            885,
            1000,
            1268,
            1296,
            1353,
            1490,
            1584,
            2006,
            2153,
            2261,
            2299,
            2431,
            2473,
            2532,
            2685,
            3156,
            3553,
            3934,
            4134,
            4395,
            4765,
            5001,
            5037,
            5060,
            5193,
            5529,
            5586,
            6460,
            6471,
            6763,
            6771,
            6894,
            6954,
            7088,
            7278,
            7281,
            7511,
            7816,
            7977,
            8021,
            8211,
            8532,
            8690,
            8844,
            9378,
            9400,
            9448,
            9483,
            9590,
            9769,
            9772,
            9891,
            10707,
            10764,
            11051,
            11149,
            11197,
            11511,
            11699,
            12120,
            12280,
            12576,
            12639,
            12670,
            12748,
            13177,
            13201,
            13291,
            13546,
            13659,
            13729,
            13774,
            14226,
            14439,
            15335,
            15597,
            15660,
            15956,
            16228,
            16249,
            16598,
            17207,
            17379,
            17436,
            17899,
            17905,
            18150,
            18193,
            18380,
            18491,
            18519,
            18770,
            18837,
            19109,
            19402,
            19432,
            19786,
            19924,
            20333,
            20992,
            21167,
            21604,
            21839,
            21879,
            21903,
            22371,
            22479,
            22705,
            22935,
            23034,
            23126,
            23359,
            23899,
            24021,
            24243,
            24567,
            25057,
            25096,
            25228,
            25386,
            25393,
            25394,
            25424,
            25560,
            25603,
            26465,
            26690,
            26941,
            27186,
            27768,
            27972,
            29187,
            29397,
            29984,
            30504,
            30828,
            31093,
            31217,
            31296,
            31620,
            31817,
            32038,
            32081,
            32334,
            32570,
            32735,
            32817,
            32861,
            32887,
            32901,
            33005,
            33104,
            33221,
            33368,
            33638,
            33759,
            34139,
            34417,
            34452,
            35062,
            35197,
            35279,
            35682,
            36494,
            36539,
            36936,
            37670,
            37689,
            37751,
            37988,
            38048,
            38118,
            38210,
            38678,
            38829,
            39405,
            39480,
            39551,
            39785,
            39914,
            39951,
            40036,
            40083,
            40757,
            41990,
            42102,
            42528,
            42628,
            43314,
            43816,
            44195,
            44279,
            44590,
            44877,
            45070,
            45550,
            46048,
            46252,
            46497,
            46872,
            47112,
            47571,
            47585,
            47740,
            47801,
            47819,
            48153,
            48396,
            48504,
            48555,
            48564,
            49060,
            49259,
            49759,
            50145,
            50326,
            50380,
            50638,
            50811,
            51314,
            51610,
            51712,
            51938,
            52007,
            52413,
            52507,
            52591,
            52996,
            53529,
            53626,
            54164,
            54592,
            54593,
            54605,
            54654,
            54931,
            54967,
            55150,
            55528,
            55950,
            56350,
            57150,
            57597,
            57672,
            58350,
            58393,
            58539,
            58705,
            59044,
            59598,
            59635,
            60052,
            60102,
            60347,
            60507,
            60823,
            60886,
            60899,
            60932,
            61418,
            61584,
            61747,
            61960,
            62353,
            62355,
            62692,
            62808,
            63047,
            63154,
            63965,
            64462,
            64523,
            64718,
            64868,
            64898,
            65288,
            65350,
            65455,
            65736,
            65798,
            66038,
            66231,
            66706,
            66771,
            66886,
            67180,
            67213,
            67310,
            67315,
            67534,
            67616,
            68093,
            68387,
            68409,
            68628,
            69213,
            69224,
            69356,
            70254,
            70739,
            71877,
            71938,
            72281,
            72795,
            72852,
            73153,
            73533,
            73702,
            73946,
            74058,
            74092,
            74200,
            74256,
            74457,
            74733,
            74860,
            75612,
            76468,
            76547,
            76625,
            78170,
            78404,
            78748,
            78843,
            78915,
            79014,
            79031,
            79229,
            79969,
            80022,
            80153,
            80273,
            80340,
            80659,
            80671,
            80932,
            81594,
            81738,
            81988,
            82085,
            82688,
            82696,
            82715,
            82812,
            82986,
            83172,
            83531,
            83540,
            84031,
            84241,
            84270,
            84362,
            84492,
            84674,
            85089,
            85157,
            85329,
            85682,
            85772,
            86582,
            86755,
            86956,
            87038,
            87144,
            87244,
            87476,
            88345,
            88485,
            88848,
            88951,
            88970,
            89078,
            89296,
            89648,
            89697,
            90284,
            90891,
            90956,
            91406,
            91495,
            91500,
            92053,
            92091,
            92416,
            92939,
            93261,
            93437,
            93717,
            94185,
            94326,
            94614,
            94871,
            94944,
            95155,
            95862,
            96427,
            96493,
            96825,
            97278,
            97337,
            97924,
            97988,
            98287,
            98716,
            98853,
            99024,
            99039,
            99054,
            99114,
            99182,
            99242,
            99810,
            100238,
            100428,
            100510,
            100624,
            100723,
            101068,
            102331,
            102356,
            102411,
            102805,
            102820,
            103548,
            103723,
            104424,
            105264,
            105912,
            106757,
            106912,
            107094,
            107226,
            107339,
            107851,
            108026,
            108253,
            108495,
            109118,
            109313,
            109900,
            109992,
            110042,
            110449,
            110784,
            110999,
            111207,
            111609,
            112110,
            112298,
            112997,
            113720,
            114049,
            114884,
            114907,
            115245,
            115870,
            115898,
            116068,
            116208,
            116439,
            117197,
            117425,
            117492,
            117525,
            117719,
            117744,
            117908,
            118367,
            118921,
            119088,
            119365,
            119445,
            119516,
            119911,
            119995,
            120420,
            121031,
            121242,
            121417,
            121497,
            121591,
            121673,
            121744,
            122046,
            122166,
            122217,
            122606,
            122672,
            122962,
            123213,
            123480,
            123633,
            124442,
            125129,
            125257,
            125472,
            125572,
            125936,
            126137,
            126226,
            127263,
            127270,
            127394,
            127530,
            127660,
            128112,
            128372,
            128476,
            128654,
            128675,
            128699,
            128748,
            129062,
            129492,
            129756,
            129812,
            129945,
            130579,
            130586,
            130599,
            130699,
            130826,
            131444,
            131556,
            132408,
            132544,
            132587,
            132703,
            132796,
            132931,
            133244,
            133343,
            133418,
            133567,
            133969,
            135410,
            135604,
            136334,
            136633,
            136715,
            136915,
            137106,
            137246,
            137294,
            137727,
            138115,
            138639,
            138979,
            139077,
            139099,
            139872,
            140203,
            140270,
            140286,
            140556,
            140640,
            140987,
            141821,
            142238,
            142324,
            142585,
            142620,
            142790,
            142971,
            143068,
            143556,
            143572,
            143931,
            143961,
            144003,
            144300,
            144333,
            144984,
            145020,
            145597,
            145620,
            145665,
            146155,
            146358,
            146457,
            146667,
            146831,
            147415,
            147729,
            147740,
            148508,
            148662,
            148739,
            148999,
            149375,
            149568,
            149770,
            150224,
            150265,
            150417,
            150638,
            150649,
            151000,
            151051,
            151480,
            151629,
            151657,
            151820,
            151938,
            152120,
            152214,
            152686,
            153011,
            153229,
            153529,
            153669,
            153797,
            154004,
            154087,
            154358,
            154425,
            154644,
            154718,
            156071,
            156076,
            156292,
            156643,
            156924,
            157046,
            157365,
            157601,
            157756,
            157767,
            157928,
            158227,
            158548,
            158660,
            158744,
            158945,
            158956,
            159399,
            160012,
            160556,
            160728,
            160864,
            161032,
            161609,
            161781,
            161799,
            161861,
            161875,
            161879,
            161925,
            161978,
            162035,
            162092,
            162415,
            162581,
            162732,
            163057,
            163117,
            163118,
            163257,
            163562,
            163640,
            163682,
            163746,
            164602,
            164883,
            164885,
            165518,
            165681,
            166165,
            166478,
            166747,
            166768,
            166918,
            167067,
            167486,
            167572,
            168337,
            168883,
            168974,
            169076,
            169169,
            169356,
            169996,
            170099,
            170116,
            170191,
            170474,
            170613,
            170955,
            171190,
            171382,
            171757,
            171788,
            172571,
            172617,
            172648,
            172649,
            172877,
            172935,
            172946,
            173008,
            173057,
            173302,
            173799,
            173830,
            174371,
            175251,
            176606,
            176799,
            176857,
            176901,
            177015,
            177065,
            177213,
            177357,
            177489,
            177539,
            177861,
            177934,
            178982,
            179112,
            179141,
            179174,
            179487,
            179642,
            179898,
            180011,
            180101,
            180135,
            180383,
            180487,
            180560,
            180751,
            181303,
            181421,
            181542,
            181666,
            181816,
            182021,
            182155,
            182441,
            182611,
            182805,
            182923,
            183127,
            183391,
            183437,
            183648,
            183675,
            183709,
            183716,
            184324,
            184611,
            184978,
            185250,
            185472,
            185890,
            185950,
            186042,
            186449,
            186624,
            187055,
            187144,
            187243,
            187249,
            187362,
            187585,
            187734,
            187990,
            188296,
            188465,
            188592,
            189475,
            189752,
            189775,
            190007,
            190140,
            190307,
            190637,
            190676,
            190753,
            190756,
            190841,
            190923,
            191288,
            191672,
            191845,
            192607,
            192670,
            192699,
            192964,
            193162,
            193181,
            193245,
            193348,
            193429,
            193674,
            193717,
            193743,
            193926,
            194471,
            194716,
            194875,
            195842,
            196141,
            196442,
            197388,
            197658,
            197870,
            198489,
            198510,
            198928,
            199055,
            199236,
            199310,
            199442,
            199551,
            199771,
            200421,
            200961,
            201072,
            201418,
            201426,
            201646,
            202001,
            202228,
            202339,
            203294,
            203389,
            203629,
            203639,
            203864,
            203931,
            204186,
            204871,
            205105,
            205289,
            205324,
            206025,
            206411,
            206487,
            206579,
            206838,
            207844,
            208363,
            209222,
            209530,
            209753,
            209757,
            209829,
            210032,
            210230,
            210299,
            210388,
            210394,
            210789,
            210915,
            211674,
            211825,
            212166,
            212226,
            212453,
            212573,
            212800,
            213033,
            213035,
            213086,
            213171,
            213255,
            213547,
            213830,
            214192,
            214539,
            214703,
            214720,
            214753,
            214869,
            215072,
            215114,
            215259,
            215723,
            216296,
            216516,
            217285,
            217872,
            218439,
            218997,
            219271,
            220584,
            221291,
            222118,
            222458,
            222735,
            223182,
            223188,
            223738,
            223747,
            223955,
            223959,
            224119,
            224222,
            224337,
            224675,
            224724,
            224807,
            225405,
            226147,
            226154,
            226408,
            226417,
            226662,
            226903,
            227399,
            227478,
            227482,
            227491,
            227898,
            228214,
            229111,
            229216,
            229358,
            229553,
            229601,
            229659,
            229849,
            229948,
            230008,
            230819,
            230983,
            230993,
            231125,
            231339,
            231508,
            231580,
            231747,
            231879,
            232563,
            232649,
            232684,
            232692,
            233238,
            233370,
            233727,
            233771,
            234526,
            234607,
            235241,
            235778,
            235784,
            235836,
            236166,
            236308,
            236426,
            237071,
            237118,
            238013,
            238410,
            239347,
            239537,
            239717,
            239773,
            239857,
            240023,
            240049,
            240250,
            241668,
            242411,
            242678,
            242724,
            242946,
            243148,
            243204,
            243867,
            243989,
            244099,
            244496,
            244750,
            244833,
            245026,
            245311,
            245320,
            245448,
            246436,
            246454,
            246883,
            246963,
            246968,
            247917,
            248112,
            248284,
            248334,
            248400,
            248616,
            248752,
            249180,
            249786,
            250127,
            250137,
            250282,
            250619,
            250901,
            251140,
            251572,
            251824,
            252219,
            252294,
            252507,
            252559,
            252701,
            252716,
            252776,
            253386,
            253695,
            253742,
            253819,
            253835,
            254016,
            254368,
            254516,
            255483,
            255749,
            256192,
            256775,
            256868,
            257084,
            257169,
            257370,
            257478,
            257566,
            257624,
            257865,
            257896,
            258388,
            258541,
            258883,
            258911,
            259097,
            259597,
            259640,
            259690,
            259830,
            259854,
            260106,
            260261,
            260470,
            261036,
            261061,
            261097,
            261116,
            261318,
            261535,
            261732,
            261888,
            261982,
            262048,
            262487,
            262587,
            262895,
            263068,
            263403,
            263425,
            263679,
            263969,
            264535,
            264968,
            265777,
            265816,
            266409,
            266768,
            266981,
            267169,
            267191,
            267537,
            268378,
            269121,
            269316,
            269632,
            270474,
            270677,
            270883,
            270908,
            271116,
            271402,
            271471,
            271997,
            272566,
            273132,
            273198,
            273232,
            273420,
            273493,
            273711,
            273715,
            273760,
            274066,
            274219,
            274272,
            274411,
            274460,
            274708,
            275058,
            275198,
            275392,
            275749,
            276018,
            276024,
            276055,
            276285,
            276434,
            276804,
            277005,
            277020,
            278705,
            278749,
            278848,
            278973,
            279278,
            279541,
            279730,
            279774,
            279927,
            280710,
            280779,
            280891,
            280918,
            280930,
            281032,
            281409,
            281414,
            281687,
            281754,
            281759,
            281929,
            282037,
            282298,
            283268,
            283520,
            283785,
            284445,
            284698,
            284743,
            284764,
            284991,
            285047,
            285894,
            286182,
            286422,
            286523,
            286553,
            286660,
            287291,
            287347,
            287527,
            288042,
            288430,
            288584,
            288685,
            288862,
            289059,
            289222,
            289229,
            289343,
            289415,
            289417,
            289594,
            289741,
            289960,
            290163,
            290248,
            290843,
            291551,
            291619,
            291634,
            291791,
            292024,
            292082,
            292236,
            292415,
            292446,
            292456,
            292488,
            292997,
            293200,
            293300,
            293625,
            293794,
            294350,
            294695,
            295138,
            295316,
            295478,
            295713,
            296222,
            296224,
            296231,
            296649,
            296657,
            297022,
            297084,
            297353,
            297427,
            297562,
            297578,
            297698,
            299553,
            299887,
            300276,
            300341,
            301061,
            301135,
            301376,
            301563,
            301718,
            301867,
            302107,
            302452,
            302536,
            302882,
            302990,
            303499,
            303566,
            303653,
            303713,
            303863,
            303893,
            304180,
            304404,
            305309,
            305609,
            306136,
            306139,
            306437,
            306700,
            307172,
            308165,
            308328,
            308394,
            308545,
            308631,
            308793,
            309391,
            309467,
            309655,
            309678,
            309964,
            310862,
            311002,
            311180,
            311190,
            311303,
            311392,
            311394,
            311928,
            312192,
            312421,
            312489,
            312552,
            312720,
            313034,
            313182,
            313454,
            313562,
            313588,
            314177,
            314251,
            314264,
            314709,
            315492,
            316404,
            317433,
            317999,
            318138,
            319100,
            319184,
            319369,
            319534,
            319607,
            319721,
            320490,
            320642,
            320696,
            320743,
            321214,
            321333,
            321790,
            322163,
            322610,
            322724,
            322944,
            323263,
            323355,
            323496,
            323799,
            323895,
            324158,
            324258,
            324614,
            325347,
            325483,
            325838,
            325991,
            326128,
            326174,
            326248,
            326462,
            326541,
            326542,
            326970,
            327306,
            327592,
            327601,
            327605,
            327617,
            327701,
            328238,
            328337,
            328430,
            328601,
            329041,
            329219,
            329323,
            329455,
            329456,
            329614,
            329827,
            330396,
            330818,
            331280,
            331604,
            331799,
            331817,
            332570,
            332845,
            332901,
            333402,
            333745,
            334309,
            334399,
            334417,
            334483,
            334530,
            334555,
            334719,
            334767,
            335328,
            336053,
            336209,
            336232,
            336265,
            336356,
            336628,
            337055,
            338219,
            338304,
            338624,
            338905,
            339823,
            340451,
            340894,
            341196,
            341469,
            341681,
            341719,
            341828,
            341921,
            341973,
            342128,
            342367,
            342397,
            342971,
            343149,
            343218,
            343453,
            343496,
            343524,
            343561,
            343706,
            343803,
            343937,
            344029,
            344268,
            345252,
            345356,
            345361,
            345385,
            345397,
            345466,
            345941,
            346232,
            346703,
            346968,
            347174,
            347254,
            347265,
            348881,
            349184,
            349594,
            349860,
            350002,
            350019,
            350122,
            350148,
            350405,
            350679,
            351096,
            351530,
            351810,
            351823,
            352582,
            352684,
            352760,
            353051,
            353180,
            354307,
            354547,
            355257,
            355817,
            356094,
            356125,
            356248,
            356387,
            356424,
            356427,
            356428,
            356505,
            356531,
            356612,
            357459,
            357737,
            357742,
            357816,
            357888,
            357978,
            358195,
            358525,
            358923,
            359540,
            359677,
            359833,
            360137,
            360661,
            360960,
            361103,
            361147,
            361238,
            361506,
            361551,
            361586,
            361730,
            361919,
            362520,
            362716,
            363188,
            363207,
            363666,
            363875,
            364102,
            364126,
            364557,
            365095,
            365208,
            365521,
            365642,
            365745,
            365886,
            366711,
            366884,
            367095,
            367195,
            367228,
            367818,
            368212,
            368294,
            368752,
            368961,
            369037,
            369310,
            369323,
            369442,
            369503,
            369541,
            370208,
            370270,
            370375,
            370486,
            370677,
            370711,
            370813,
            371042,
            371529,
            371552,
            371699,
            371749,
            372349,
            372577,
            372819,
            373315,
            373353,
            373382,
            373705,
            374052,
            374083,
            374369,
            374982,
            375278,
            375469,
            375493,
            376093,
            376112,
            376206,
            376307,
            376322,
            376365,
            376625,
            376900,
            377113,
            377239,
            377368,
            377486,
            377588,
            377635,
            377723,
            378116,
            378244,
            378284,
            378454,
            378515,
            378673,
            378873,
            379332,
            380706,
            380711,
            380913,
            381360,
            381587,
            381639,
            381971,
            382009,
            382111,
            382125,
            383289,
            383337,
            383384,
            383606,
            383838,
            383842,
            384136,
            384468,
            384666,
            384670,
            384808,
            385029,
            386352,
            386879,
            386912,
            387916,
            388056,
            388215,
            388846,
            388903,
            388927,
            389109,
            389197,
            389316,
            389532,
            389684,
            389812,
            390246,
            390555,
            390826,
            390902,
            391140,
            391290,
            391375,
            391722,
            392722,
            393056,
            393093,
            393115,
            393226,
            393469,
            393569,
            394199,
            394206,
            394275,
            394510,
            394559,
            394677,
            394940,
            395180,
            395388,
            395801,
            395903,
            396200,
            396338,
            396518,
            396863,
            397133,
            397279,
            397303,
            397351,
            397354,
            397681,
            398028,
            398203,
            398237,
            398377,
            398438,
            398742,
            398905,
            399205,
            399296,
            399462,
            399764,
            400044,
            400161,
            400573,
            400794,
            400803,
            400815,
            401244,
            401250,
            401446,
            401862,
            402118,
            402615,
            402720,
            402774,
            403122,
            403565,
            403584,
            404249,
            404484,
            404678,
            404805,
            404839,
            404922,
            404923,
            405195,
            405249,
            406129,
            406417,
            406611,
            406997,
            407002,
            407083,
            407298,
            407646,
            407650,
            407868,
            407943,
            408120,
            408696,
            408774,
            409198,
            409211,
            409475,
            409542,
            410456,
            410496,
            410510,
            410650,
            410880,
            411530,
            411754,
            411774,
            411817,
            411938,
            411953,
            412286,
            412362,
            412894,
            413395,
            413404,
            413552,
            413689,
            414034,
            414170,
            414385,
            414510,
            414673,
            414795,
            415727,
            415748,
            415882,
            415990,
            416104,
            416343,
            416451,
            417249,
            417632,
            417911,
            418062,
            419379,
            419408,
            419974,
            420069,
            420281,
            420840,
            420916,
            421060,
            421455,
            422670,
            422706,
            422836,
            422886,
            422998,
            423104,
            423123,
            423506,
            424135,
            424162,
            424349,
            424521,
            424551,
            424642,
            424975,
            425221,
            425226,
            425361,
            425702,
            425906,
            426203,
            426241,
            426268,
            426376,
            426795,
            426836,
            427034,
            427077,
            427160,
            427256,
            427655,
            427997,
            428111,
            428218,
            428454,
            428562,
            429690,
            429761,
            430073,
            430377,
            430961,
            431545,
            431693,
            431848,
            431876,
            432085,
            432553,
            432898,
            433103,
            433915,
            433980,
            434204,
            434230,
            434459,
            434548,
            435205,
            435206,
            435208,
            436617,
            437205,
            437239,
            437331,
            437351,
            437514,
            438304,
            438774,
            438862,
            438876,
            438907,
            438955,
            439180,
            439426,
            439522,
            439525,
            439593,
            439715,
            439773,
            439854,
            439994,
            440171,
            440184,
            440336,
            440475,
            441247,
            441286,
            441442,
            441491,
            441543,
            441553,
            441586,
            442161,
            442306,
            442456,
            442463,
            442746,
            442836,
            443426,
            443844,
            443969,
            444142,
            445602,
            445722,
            445792,
            445834,
            445999,
            446651,
            447088,
            447187,
            447314,
            447465,
            447611,
            447917,
            448076,
            448256,
            448263,
            448365,
            448410,
            448810,
            449312,
            449432,
            449579,
            449603,
            449661,
            449909,
            450075,
            450202,
            450303,
            450399,
            450559,
            450686,
            451043,
            451084,
            451144,
            451155,
            451435,
            451714,
            451879,
            452515,
            452784,
            453001,
            453166,
            453708,
            454067,
            454404,
            454798,
            455085,
            455157,
            455219,
            455301,
            455448,
            455555,
            455597,
            455624,
            455937,
            456015,
            456303,
            456496,
            456559,
            456662,
            457078,
            457559,
            457848,
            457884,
            458045,
            458109,
            458223,
            458255,
            458325,
            458755,
            458992,
            459153,
            459195,
            459272,
            459437,
            459662,
            459954,
            460333,
            460683,
            461009,
            461751,
            462031,
            462371,
            462904,
            463174,
            463199,
            463542,
            463618,
            463690,
            463730,
            463802,
            463918,
            464089,
            464144,
            464476,
            464824,
            465129,
            465179,
            465180,
            465549,
            465718,
            465806,
            465822,
            465836,
            466125,
            466602,
            466986,
            467176,
            467315,
            467511,
            467848,
            468332,
            468501,
            468505,
            468577,
            468632,
            468954,
            468965,
            469067,
            469828,
            470773,
            470779,
            470924,
            470952,
            471023,
            471087,
            471756,
            471893,
            472298,
            472623,
            473118,
            473121,
            473219,
            473237,
            473406,
            473869,
            474021,
            474028,
            474039,
            474078,
            474095,
            474167,
            474293,
            474344,
            474854,
            475064,
            475191,
            475387,
            475572,
            476119,
            476215,
            476258,
            476415,
            476514,
            476770,
            477288,
            477689,
            477805,
            477955,
            478420,
            478721,
            478862,
            479126,
            479155,
            479248,
            479953,
            480021,
            480275,
            480936,
            480985,
            481386,
            481390,
            481413,
            481567,
            481573,
            481582,
            482275,
            482319,
            482436,
            482585,
            482735,
            482800,
            482917,
            483667,
            483999,
            484351,
            484415,
            484893,
            484978,
            485027,
            485071,
            485480,
            485844,
            486104,
            486112,
            486438,
            488166,
            488251,
            488592,
            488673,
            488710,
            489305,
            489339,
            489611,
            489764,
            489842,
            489924,
            490171,
            490515,
            490936,
            491008,
            491090,
            491130,
            491366,
            491464,
            491867,
            492077,
            492110,
            492282,
            492284,
            492362,
            492758,
            492937,
            492968,
            493286,
            493442,
            493772,
            493864,
            493905,
            494188,
            494759,
            494869,
            494913,
            495146,
            495732,
            496409,
            496571,
            496854,
            497344,
            497599,
            497867,
            498032,
            498747,
            498807,
            499031,
            499266,
            499622,
            500257,
            500270,
            500477,
            500478,
            500565,
            500716,
            501005,
            501368,
            502168,
            502336,
            502737,
            503755,
            504074,
            504389,
            504415,
            504589,
            505789,
            505942,
            506178,
            506656,
            506707,
            506933,
            507015,
            507037,
            507223,
            507473,
            507667,
            507797,
            507975,
            508101,
            508312,
            508370,
            508730,
            508917,
            509014,
            509403,
            509451,
            510095,
            510329,
            511076,
            511384,
            511599,
            511647,
            511760,
            511999,
            512657,
            512776,
            512836,
            512929,
            512985,
            513041,
            513283,
            513524,
            513567,
            513580,
            514508,
            514586,
            514797,
            515025,
            515077,
            515350,
            515577,
            515579,
            515828,
            515982,
            516038,
            516173,
            516318,
            516601,
            516677,
            517056,
            517069,
            518326,
            518770,
            519208,
            519688,
            520009,
            520264,
            520659,
            520707,
            520832,
            520910,
            521141,
            521259,
            521509,
            521717,
            521819,
            521956,
            522393,
            522889,
            523100,
            523807,
            523957,
            524456,
            524850,
            525155,
            526728,
            527029,
            527215,
            527427,
            527616,
            527750,
            528314,
            528399,
            529122,
            529148,
            529762,
            529939,
            530061,
            530162,
            530820,
            530975,
            531036,
            531134,
            531135,
            531707,
            532058,
            532481,
            532493,
            532690,
            532855,
            533493,
            533816,
            534041,
            534270,
            534605,
            534673,
            534827,
            535306,
            535523,
            535858,
            536038,
            537270,
            537506,
            537827,
            537991,
            538236,
            538364,
            538458,
            539883,
            540414,
            540466,
            541055,
            541123,
            541773,
            542127,
            542423,
            542776,
            542856,
            544444,
            544519,
            545007,
            545100,
            545219,
            545594,
            546219,
            546475,
            546717,
            546823,
            546964,
            546976,
            547336,
            547854,
            547886,
            548246,
            548339,
            548780,
            549055,
            549220,
            549390,
            549930,
            550349,
            550714,
            551215,
            551439,
            551794,
            551804,
            551820,
            552775,
            552842,
            553221,
            553669,
            553731,
            553776,
            553788,
            553990,
            554002,
            554156,
            554266,
            554328,
            554579,
            554595,
            554735,
            556000,
            556158,
            556193,
            557672,
            557916,
            558114,
            558213,
            558854,
            559160,
            559348,
            559543,
            559547,
            559842,
            559956,
            560474,
            560880,
            560911,
            561223,
            561256,
            561958,
            562207,
            562229,
            562243,
            562581,
            563267,
            563281,
            563349,
            563470,
            563604,
            563648,
            563653,
            563882,
            564091,
            564336,
            565045,
            565778,
            565853,
            565877,
            565962,
            566282,
            566436,
            566923,
            567011,
            567640,
            567740,
            567886,
            568195,
            568213,
            568439,
            568584,
            568710,
            568814,
            568981,
            569030,
            569273,
            569825,
            569972,
            569976,
            570471,
            570539,
            570664,
            570688,
            570756,
            570834,
            571264,
            571598,
            571718,
            571857,
            572462,
            572620,
            572900,
            573258,
            574297,
            574315,
            574520,
            574702,
            574823,
            575081,
            575187,
            575243,
            576031,
            576052,
            576566,
            576654,
            576955,
            577539,
            577864,
            577932,
            578489,
            578545,
            578792,
            578871,
            579070,
            579307,
            579321,
            579655,
            579902,
            580197,
            580294,
            581062,
            581206,
            581317,
            581357,
        ]

        for iou in [0.7, 0.8, 0.6, 0.5]:
            for confidence in [0.01]:
                for with_empty_samples in [False, True]:
                    if not with_empty_samples:
                        current_image_files = [
                            image_file for image_file in image_files if int(os.path.splitext(os.path.basename(image_file))[0]) in non_empty_image_ids
                        ]
                    else:
                        current_image_files = image_files

                    predictions = model.predict(
                        current_image_files, conf=confidence, iou=iou, pre_nms_max_predictions=300, post_nms_max_predictions=30, fuse_model=False
                    )

                    # predictions_dir = f"coco_val_predictions_conf_{confidence:.2f}_iou_{iou:.2f}_empty_{with_empty_samples}"
                    # os.makedirs(predictions_dir, exist_ok=True)
                    # predictions.save(predictions_dir)

                    gt = self._load_coco_groundtruth(with_crowd=True, with_duplicates=True, with_invisible_keypoitns=True)

                    predicted_poses = []
                    predicted_scores = []
                    non_empty_image_ids = []
                    for image_file, image_predictions in zip(current_image_files, predictions):
                        non_empty_image_ids.append(int(os.path.splitext(os.path.basename(image_file))[0]))
                        predicted_poses.append(image_predictions.prediction.poses)
                        predicted_scores.append(image_predictions.prediction.scores)

                    coco_pred = self._coco_convert_predictions_to_dict(predicted_poses, predicted_scores, non_empty_image_ids)

                    with tempfile.TemporaryDirectory() as td:
                        res_file = os.path.join(td, "keypoints_coco2017_results.json")

                        with open(res_file, "w") as f:
                            json.dump(coco_pred, f)

                        coco_dt = self._load_coco_groundtruth(with_crowd=True, with_duplicates=True, with_invisible_keypoitns=True, with_empty_samples=True)
                        coco_dt = coco_dt.loadRes(res_file)

                        coco_evaluator = COCOeval(gt, coco_dt, iouType="keypoints")
                        print("confidence", confidence, "iou", iou, "with_empty_samples", with_empty_samples)
                        coco_evaluator.evaluate()  # run per image evaluation
                        coco_evaluator.accumulate()  # accumulate per image results
                        coco_evaluator.summarize()  # display summary metrics of results

    def _load_coco_groundtruth(self, with_crowd: bool, with_duplicates: bool, with_invisible_keypoitns: bool, with_empty_samples: bool = True):
        gt_annotations_path = os.path.join(os.path.dirname(os.path.dirname(__file__)), "data/coco2017/annotations/person_keypoints_val2017.json")
        assert os.path.isfile(gt_annotations_path)

        gt = COCO(gt_annotations_path)
        if not with_duplicates:
            gt = remove_duplicate_annotations(gt)

        if not with_invisible_keypoitns:
            gt = make_keypoints_outside_image_invisible(gt)

        if not with_crowd:
            gt = remove_crowd_annotations(gt)

        if not with_empty_samples:
            gt = remove_empty_samples(gt)
        return gt

    def _internal_compare_method(self, with_crowd: bool, with_duplicates: bool, with_invisible_keypoitns: bool, device: str):
        random.seed(0)
        np.random.seed(0)

        # Load groundtruth annotations
        gt = self._load_coco_groundtruth(with_crowd, with_duplicates, with_invisible_keypoitns)

        # Generate predictions by randomly dropping some instances and adding noise to remaining poses
        (
            predicted_poses,
            predicted_scores,
            groundtruths_poses,
            groundtruths_iscrowd,
            groundtruths_areas,
            groundtruths_bboxes,
            image_ids,
        ) = self.generate_noised_predictions(gt, instance_drop_probability=0.1, pose_offset=1)

        # Compute metrics using SG implementation
        def convert_predictions_to_target_format(preds):
            # This is out predictions decode function. Here it's no-op since we pass decoded predictions as the input
            # but in real life this post-processing callback should be doing actual pose decoding & NMS
            return preds

        sg_metrics = PoseEstimationMetrics(
            post_prediction_callback=convert_predictions_to_target_format,
            num_joints=17,
            max_objects_per_image=20,
            iou_thresholds_to_report=(0.5, 0.75),
        ).to(device)

        sg_metrics.update(
            preds=(predicted_poses, predicted_scores),
            target=None,
            gt_joints=groundtruths_poses,
            gt_iscrowd=groundtruths_iscrowd,
            gt_areas=groundtruths_areas,
            gt_bboxes=groundtruths_bboxes,
        )

        actual_metrics = sg_metrics.compute()
        pprint(actual_metrics)

        coco_pred = self._coco_convert_predictions_to_dict(predicted_poses, predicted_scores, image_ids)

        with tempfile.TemporaryDirectory() as td:
            res_file = os.path.join(td, "keypoints_coco2017_results.json")

            with open(res_file, "w") as f:
                json.dump(coco_pred, f, sort_keys=True, indent=4)

            coco_dt = self._load_coco_groundtruth(with_crowd, with_duplicates, with_invisible_keypoitns)
            coco_dt = coco_dt.loadRes(res_file)

            coco_evaluator = COCOeval(gt, coco_dt, iouType="keypoints")
            coco_evaluator.evaluate()  # run per image evaluation
            coco_evaluator.accumulate()  # accumulate per image results
            coco_evaluator.summarize()  # display summary metrics of results
            expected_metrics = coco_evaluator.stats

        self.assertAlmostEquals(expected_metrics[0], actual_metrics["AP"], delta=0.002)
        self.assertAlmostEquals(expected_metrics[5], actual_metrics["AR"], delta=0.002)

    def test_compare_pycocotools_with_our_implementation_no_crowd(self):
        for device in ["cuda", "cpu"] if torch.cuda.is_available() else ["cpu"]:
            self._internal_compare_method(False, True, True, device)

    def test_compare_pycocotools_with_our_implementation_no_duplicates(self):
        for device in ["cuda", "cpu"] if torch.cuda.is_available() else ["cpu"]:
            self._internal_compare_method(True, False, True, device)

    def test_compare_pycocotools_with_our_implementation_no_invisible(self):
        for device in ["cuda", "cpu"] if torch.cuda.is_available() else ["cpu"]:
            self._internal_compare_method(True, True, False, device)

    def test_metric_works_on_empty_predictions(self):
        # Compute metrics using SG implementation
        def convert_predictions_to_target_format(preds):
            # This is out predictions decode function. Here it's no-op since we pass decoded predictions as the input
            # but in real life this post-processing callback should be doing actual pose decoding & NMS
            return preds

        sg_metrics = PoseEstimationMetrics(
            post_prediction_callback=convert_predictions_to_target_format,
            num_joints=17,
            max_objects_per_image=20,
            iou_thresholds=None,
            oks_sigmas=None,
        )

        actual_metrics = sg_metrics.compute()
        pprint(actual_metrics)

        self.assertEqual(-1, actual_metrics["AP"])
        self.assertEqual(-1, actual_metrics["AR"])

    def generate_noised_predictions(self, coco: COCO, instance_drop_probability: float, pose_offset: float) -> Tuple[List, List, List]:
        """

        :param coco:
        :return: List of tuples (poses, image_id)
        """
        image_ids = []

        predicted_poses = []
        predicted_scores = []

        groundtruths_poses = []
        groundtruths_iscrowd = []
        groundtruths_areas = []
        groundtruths_bboxes = []

        for image_id, image_info in coco.imgs.items():
            image_id_int = int(image_id)
            image_width = image_info["width"]
            image_height = image_info["height"]

            ann_ids = coco.getAnnIds(imgIds=image_id_int)
            anns = coco.loadAnns(ann_ids)

            image_pred_keypoints = []
            image_gt_keypoints = []
            image_gt_iscrowd = []
            image_gt_areas = []
            image_gt_bboxes = []

            for ann in anns:
                gt_keypoints = np.array(ann["keypoints"]).reshape(-1, 3).astype(np.float32)

                image_gt_keypoints.append(gt_keypoints)
                image_gt_iscrowd.append(ann["iscrowd"])
                image_gt_areas.append(ann["area"])
                image_gt_bboxes.append(ann["bbox"])

                if np.random.rand() < instance_drop_probability:
                    continue

                keypoints = gt_keypoints.copy()
                if pose_offset > 0:
                    keypoints[:, 0] += (2 * np.random.randn() - 1) * pose_offset
                    keypoints[:, 1] += (2 * np.random.randn() - 1) * pose_offset

                    keypoints[:, 0] = np.clip(keypoints[:, 0], 0, image_width)
                    keypoints[:, 1] = np.clip(keypoints[:, 1], 0, image_height)

                    # Apply random score for visible keypoints
                    keypoints[:, 2] = (keypoints[:, 2] > 0) * np.random.randn(len(keypoints))

                image_pred_keypoints.append(keypoints)

            image_ids.append(image_id_int)
            predicted_poses.append(image_pred_keypoints)
            predicted_scores.append(np.random.rand(len(image_pred_keypoints)))

            groundtruths_poses.append(image_gt_keypoints)
            groundtruths_iscrowd.append(np.array(image_gt_iscrowd, dtype=bool))
            groundtruths_areas.append(np.array(image_gt_areas))
            groundtruths_bboxes.append(np.array(image_gt_bboxes))

        return predicted_poses, predicted_scores, groundtruths_poses, groundtruths_iscrowd, groundtruths_areas, groundtruths_bboxes, image_ids

    def _coco_convert_predictions_to_dict(self, predicted_poses, predicted_scores, image_ids):
        kpts = collections.defaultdict(list)
        for poses, scores, image_id_int in zip(predicted_poses, predicted_scores, image_ids):

            for person_index, kpt in enumerate(poses):
                area = (np.max(kpt[:, 0]) - np.min(kpt[:, 0])) * (np.max(kpt[:, 1]) - np.min(kpt[:, 1]))
                kpt = self._coco_process_keypoints(kpt)
                kpts[image_id_int].append({"keypoints": kpt[:, 0:3], "score": float(scores[person_index]), "image": image_id_int, "area": area})

        oks_nmsed_kpts = []
        # image x person x (keypoints)
        for img in kpts.keys():
            # person x (keypoints)
            img_kpts = kpts[img]
            # person x (keypoints)
            # do not use nms, keep all detections
            keep = []
            if len(keep) == 0:
                oks_nmsed_kpts.append(img_kpts)
            else:
                oks_nmsed_kpts.append([img_kpts[_keep] for _keep in keep])

        classes = ["__background__", "person"]
        _class_to_coco_ind = {cls: i for i, cls in enumerate(classes)}

        data_pack = [
            {"cat_id": _class_to_coco_ind[cls], "cls_ind": cls_ind, "cls": cls, "ann_type": "keypoints", "keypoints": oks_nmsed_kpts}
            for cls_ind, cls in enumerate(classes)
            if not cls == "__background__"
        ]

        results = self._coco_keypoint_results_one_category_kernel(data_pack[0], num_joints=17)
        return results

    def _coco_keypoint_results_one_category_kernel(self, data_pack, num_joints: int):
        cat_id = data_pack["cat_id"]
        keypoints = data_pack["keypoints"]
        cat_results = []

        for img_kpts in keypoints:
            if len(img_kpts) == 0:
                continue

            _key_points = np.array([img_kpts[k]["keypoints"] for k in range(len(img_kpts))])
            key_points = np.zeros((_key_points.shape[0], num_joints * 3), dtype=np.float32)

            for ipt in range(num_joints):
                key_points[:, ipt * 3 + 0] = _key_points[:, ipt, 0]
                key_points[:, ipt * 3 + 1] = _key_points[:, ipt, 1]
                # keypoints score.
                key_points[:, ipt * 3 + 2] = _key_points[:, ipt, 2]

            for k in range(len(img_kpts)):
                kpt = key_points[k].reshape((num_joints, 3))
                left_top = np.amin(kpt, axis=0)
                right_bottom = np.amax(kpt, axis=0)

                w = right_bottom[0] - left_top[0]
                h = right_bottom[1] - left_top[1]

                cat_results.append(
                    {
                        "image_id": img_kpts[k]["image"],
                        "category_id": cat_id,
                        "keypoints": list(key_points[k]),
                        "score": img_kpts[k]["score"],
                        "bbox": list([left_top[0], left_top[1], w, h]),
                    }
                )

        return cat_results

    def _coco_process_keypoints(self, keypoints):
        tmp = keypoints.copy()
        if keypoints[:, 2].max() > 0:
            num_keypoints = keypoints.shape[0]
            for i in range(num_keypoints):
                tmp[i][0:3] = [float(keypoints[i][0]), float(keypoints[i][1]), float(keypoints[i][2])]

        return tmp


if __name__ == "__main__":
    unittest.main()
