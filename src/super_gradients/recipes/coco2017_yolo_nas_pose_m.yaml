defaults:
  - training_hyperparams: coco2017_yolo_nas_pose_train_params
  - dataset_params: coco_pose_estimation_yolo_nas_mosaic_dataset_params
  - arch_params: yolo_nas_pose_m_arch_params
  - checkpoint_params: default_checkpoint_params
  - _self_
  - variable_setup

architecture: yolo_nas_pose_m

multi_gpu: DDP
num_gpus: 8

# Assemble experiment suffix
bbox_cls_loss_suffix: boxcls_${training_hyperparams.criterion_params.classification_loss_type}X${training_hyperparams.criterion_params.classification_loss_weight}
bbox_reg_loss_suffix: boxreg_${training_hyperparams.criterion_params.regression_iou_loss_type}X${training_hyperparams.criterion_params.iou_loss_weight}_dflX${training_hyperparams.criterion_params.dfl_loss_weight}
pose_cls_loss_suffix: posecls_${training_hyperparams.criterion_params.pose_classification_loss_type}X${training_hyperparams.criterion_params.pose_cls_loss_weight}
pose_reg_loss_suffix: poseregX${training_hyperparams.criterion_params.pose_reg_loss_weight}_rscl_${training_hyperparams.criterion_params.rescale_pose_loss_with_assigned_score}_byoks_${training_hyperparams.criterion_params.assigner_multiply_by_pose_oks}

train_suffix: "ema_${training_hyperparams.ema}"
experiment_suffix: "128_512_512_2_2_3_0_1_0"
experiment_name: coco2017_${architecture}_${experiment_suffix}_${bbox_cls_loss_suffix}_${bbox_reg_loss_suffix}_${pose_cls_loss_suffix}_${pose_reg_loss_suffix}_${dataset_params.dataset_params_suffix}_${train_suffix}

ckpt_root_dir:

train_dataloader: coco2017_pose_train
val_dataloader: coco2017_pose_val

arch_params:
  num_classes: ${dataset_params.num_joints}

checkpoint_params:
  # For training Yolo-NAS-S pose estimation model we use pretrained weights for Yolo-NAS-S object detection model.
  # By setting strict_load: key_matching we load only those weights that match the keys of the model.
  checkpoint_path: https://sghub.deci.ai/models/yolo_nas_m_coco.pth
  strict_load:
    _target_: super_gradients.training.sg_trainer.StrictLoad
    value: key_matching

dataset_params:
  mosaic_prob: 0.5

  train_dataloader_params:
    batch_size: 32

  val_dataloader_params:
    batch_size: 32
